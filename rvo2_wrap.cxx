/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x031110
#endif


#include <node.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) do { SWIGV8_ErrorHandler.error(code, msg); SWIG_fail; } while (0)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#else
  void (*dtor) (const v8::WeakCallbackInfo<SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elifif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor, v8::WeakCallbackType::kParameter);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor, v8::WeakCallbackType::kParameter);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  if(objRef->InternalFieldCount() < 1) return false;
#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("__swig__packed_data__"));
  v8::Local<v8::Value> flag;
  if (!objRef->GetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey).ToLocal(&flag))
    return false;
#endif
  return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackInfo<SwigV8PackedData> &data) {
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("__swig__packed_data__"));
  obj->SetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey, SWIGV8_BOOLEAN_NEW(true));
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete, v8::WeakCallbackType::kParameter);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorNameGetterCallback  SwigV8AccessorGetterCallback;
typedef v8::AccessorNameSetterCallback  SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
#else
  obj->SetAccessor(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW(symbol), getter, setter);
#endif
}

#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#else
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#endif
{
    char buffer[256];
    char msg[512];
    int res;

#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
#else
    v8::Local<v8::String> sproperty;
    if (property->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocal(&sproperty)) {
      sproperty->WriteUtf8(buffer, 256);
      res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
    }
    else {
      res = -1;
    }
#endif

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
fail: ;
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_RVO__Agent swig_types[0]
#define SWIGTYPE_p_RVO__KdTree swig_types[1]
#define SWIGTYPE_p_RVO__Line swig_types[2]
#define SWIGTYPE_p_RVO__Obstacle swig_types[3]
#define SWIGTYPE_p_RVO__RVOSimulator swig_types[4]
#define SWIGTYPE_p_RVO__Vector2 swig_types[5]
#define SWIGTYPE_p_char swig_types[6]
#define SWIGTYPE_p_size_type swig_types[7]
#define SWIGTYPE_p_std__vectorT_Line_t swig_types[8]
#define SWIGTYPE_p_std__vectorT_RVO__Line_t swig_types[9]
#define SWIGTYPE_p_std__vectorT_RVO__Vector2_t swig_types[10]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[11]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[12]
#define SWIGTYPE_p_value_type swig_types[13]
static swig_type_info *swig_types[15];
static swig_module_info swig_module = {swig_types, 14, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


#include "src/RVO.h"
#include "src/Vector2.h"
#include "src/Definitions.h"
#include "src/Agent.h"
#include "src/Obstacle.h"
#include "src/KdTree.h"
#include "src/RVOSimulator.h"


#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();

  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_float (v8::Handle<v8::Value> obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (float)(v);
    }
  }  
  return res;
}


SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (v8::Handle<v8::Value> obj, unsigned long long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long long longVal = (long long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (v8::Handle<v8::Value> obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = (size_t)(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = (size_t)(v);
  }
#endif
  return res;
}


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = obj->BooleanValue();
  return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW((long)(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long_SS_long  (long long value)
{
  return SWIGV8_NUMBER_NEW(value);
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW((long)(value));
}
#endif


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  ((unsigned long)(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  ((unsigned long long)(value));
  }
#endif
}


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();

  return SWIG_OK;
}

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}

SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< RVO::Line >::const_reference std_vector_Sl_RVO_Line_Sg__get(std::vector< RVO::Line > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_RVO_Line_Sg__set(std::vector< RVO::Line > *self,int i,std::vector< RVO::Line >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< RVO::Vector2 >::const_reference std_vector_Sl_RVO_Vector2_Sg__get(std::vector< RVO::Vector2 > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_RVO_Vector2_Sg__set(std::vector< RVO::Vector2 > *self,int i,std::vector< RVO::Vector2 >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#define SWIGV8_INIT rvo2_initialize


SWIGV8_ClientData _exports_Vector2_clientData;
SWIGV8_ClientData _exports_Agent_clientData;
SWIGV8_ClientData _exports_Obstacle_clientData;
SWIGV8_ClientData _exports_KdTree_clientData;
SWIGV8_ClientData _exports_Line_clientData;
SWIGV8_ClientData _exports_RVOSimulator_clientData;
SWIGV8_ClientData _exports_vectori_clientData;
SWIGV8_ClientData _exports_vectord_clientData;
SWIGV8_ClientData _exports_vectorline_clientData;
SWIGV8_ClientData _exports_vectorvector_clientData;


static SwigV8ReturnValue _wrap_new_Vector2__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  RVO::Vector2 *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Vector2__SWIG_0.");
  result = (RVO::Vector2 *)new RVO::Vector2();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_RVO__Vector2, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Vector2__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  RVO::Vector2 *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Vector2__SWIG_1.");
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vector2" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector2" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = (RVO::Vector2 *)new RVO::Vector2(arg1,arg2);
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_RVO__Vector2, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Vector2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Vector2__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Vector2__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Vector2__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Vector2__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Vector2");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2_x(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = (RVO::Vector2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector2_x.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_x" "', argument " "1"" of type '" "RVO::Vector2 const *""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  result = (float)((RVO::Vector2 const *)arg1)->x();
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2_y(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = (RVO::Vector2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector2_y.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_y" "', argument " "1"" of type '" "RVO::Vector2 const *""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  result = (float)((RVO::Vector2 const *)arg1)->y();
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2_sub__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = (RVO::Vector2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  RVO::Vector2 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_sub" "', argument " "1"" of type '" "RVO::Vector2 const *""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  result = ((RVO::Vector2 const *)arg1)->operator -();
  jsresult = SWIG_NewPointerObj((new RVO::Vector2((const RVO::Vector2&)(result))), SWIGTYPE_p_RVO__Vector2, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2_mul__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = (RVO::Vector2 *) 0 ;
  RVO::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_mul" "', argument " "1"" of type '" "RVO::Vector2 const *""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector2_mul" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector2_mul" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  result = (float)((RVO::Vector2 const *)arg1)->operator *((RVO::Vector2 const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2_mul__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = (RVO::Vector2 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  RVO::Vector2 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_mul" "', argument " "1"" of type '" "RVO::Vector2 const *""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector2_mul" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((RVO::Vector2 const *)arg1)->operator *(arg2);
  jsresult = SWIG_NewPointerObj((new RVO::Vector2((const RVO::Vector2&)(result))), SWIGTYPE_p_RVO__Vector2, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2__wrap_Vector2_mul(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Vector2_mul__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Vector2_mul__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Vector2_mul__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Vector2_mul__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function mul.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2_div(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = (RVO::Vector2 *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  RVO::Vector2 result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector2_div.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_div" "', argument " "1"" of type '" "RVO::Vector2 const *""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector2_div" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  result = ((RVO::Vector2 const *)arg1)->operator /(arg2);
  jsresult = SWIG_NewPointerObj((new RVO::Vector2((const RVO::Vector2&)(result))), SWIGTYPE_p_RVO__Vector2, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = (RVO::Vector2 *) 0 ;
  RVO::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RVO::Vector2 result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector2_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_add" "', argument " "1"" of type '" "RVO::Vector2 const *""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector2_add" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector2_add" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  result = ((RVO::Vector2 const *)arg1)->operator +((RVO::Vector2 const &)*arg2);
  jsresult = SWIG_NewPointerObj((new RVO::Vector2((const RVO::Vector2&)(result))), SWIGTYPE_p_RVO__Vector2, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2_sub__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = (RVO::Vector2 *) 0 ;
  RVO::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  RVO::Vector2 result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_sub" "', argument " "1"" of type '" "RVO::Vector2 const *""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector2_sub" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector2_sub" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  result = ((RVO::Vector2 const *)arg1)->operator -((RVO::Vector2 const &)*arg2);
  jsresult = SWIG_NewPointerObj((new RVO::Vector2((const RVO::Vector2&)(result))), SWIGTYPE_p_RVO__Vector2, SWIG_POINTER_OWN |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2__wrap_Vector2_sub(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Vector2_sub__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Vector2_sub__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Vector2_sub__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Vector2_sub__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function sub.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2_isEqual(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = (RVO::Vector2 *) 0 ;
  RVO::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector2_isEqual.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_isEqual" "', argument " "1"" of type '" "RVO::Vector2 const *""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector2_isEqual" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector2_isEqual" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  result = (bool)((RVO::Vector2 const *)arg1)->operator ==((RVO::Vector2 const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Vector2_notEqual(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = (RVO::Vector2 *) 0 ;
  RVO::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Vector2_notEqual.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector2_notEqual" "', argument " "1"" of type '" "RVO::Vector2 const *""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vector2_notEqual" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vector2_notEqual" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  result = (bool)((RVO::Vector2 const *)arg1)->operator !=((RVO::Vector2 const &)*arg2);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Vector2(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Vector2(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Vector2(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
      static void _wrap_delete_Vector2(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Vector2(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            RVO::Vector2 * arg1 = (RVO::Vector2 *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_abs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_abs.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "abs" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "abs" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  result = (float)RVO::abs((RVO::Vector2 const &)*arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_absSq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_absSq.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "absSq" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "absSq" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  result = (float)RVO::absSq((RVO::Vector2 const &)*arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_det(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = 0 ;
  RVO::Vector2 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_det.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "det" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "det" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "det" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "det" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  result = (float)RVO::det((RVO::Vector2 const &)*arg1,(RVO::Vector2 const &)*arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_normalize(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  RVO::Vector2 result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_normalize.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalize" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalize" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  result = RVO::normalize((RVO::Vector2 const &)*arg1);
  jsresult = SWIG_NewPointerObj((new RVO::Vector2((const RVO::Vector2&)(result))), SWIGTYPE_p_RVO__Vector2, SWIG_POINTER_OWN |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
static SwigV8ReturnValue _wrap_RVO_EPSILON_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_RVO_EPSILON_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    float result;
    
    result = (float)(float)RVO_EPSILON;
    jsresult = SWIG_From_float((float)(result));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_distSqPointLineSegment(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = 0 ;
  RVO::Vector2 *arg2 = 0 ;
  RVO::Vector2 *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_distSqPointLineSegment.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "distSqPointLineSegment" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distSqPointLineSegment" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "distSqPointLineSegment" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distSqPointLineSegment" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "distSqPointLineSegment" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distSqPointLineSegment" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg3 = (RVO::Vector2 *)(argp3);
  result = (float)RVO::distSqPointLineSegment((RVO::Vector2 const &)*arg1,(RVO::Vector2 const &)*arg2,(RVO::Vector2 const &)*arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_leftOf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::Vector2 *arg1 = 0 ;
  RVO::Vector2 *arg2 = 0 ;
  RVO::Vector2 *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_leftOf.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "leftOf" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "leftOf" "', argument " "1"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg1 = (RVO::Vector2 *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "leftOf" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "leftOf" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "leftOf" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "leftOf" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg3 = (RVO::Vector2 *)(argp3);
  result = (float)RVO::leftOf((RVO::Vector2 const &)*arg1,(RVO::Vector2 const &)*arg2,(RVO::Vector2 const &)*arg3);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sqr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sqr.");
  
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sqr" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  result = (float)RVO::sqr(arg1);
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Agent(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Agent(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Agent(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
      static void _wrap_delete_Agent(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Agent(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            RVO::Agent * arg1 = (RVO::Agent *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_Agent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Agent can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_linearProgram1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = 0 ;
  size_t arg2 ;
  float arg3 ;
  RVO::Vector2 *arg4 = 0 ;
  bool arg5 ;
  RVO::Vector2 *arg6 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  bool result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_linearProgram1.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_Line_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "linearProgram1" "', argument " "1"" of type '" "std::vector< RVO::Line > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "linearProgram1" "', argument " "1"" of type '" "std::vector< RVO::Line > const &""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "linearProgram1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_float(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "linearProgram1" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  res4 = SWIG_ConvertPtr(args[3], &argp4, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "linearProgram1" "', argument " "4"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "linearProgram1" "', argument " "4"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg4 = (RVO::Vector2 *)(argp4);
  ecode5 = SWIG_AsVal_bool(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "linearProgram1" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = (bool)(val5);
  res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "linearProgram1" "', argument " "6"" of type '" "RVO::Vector2 &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "linearProgram1" "', argument " "6"" of type '" "RVO::Vector2 &""'"); 
  }
  arg6 = (RVO::Vector2 *)(argp6);
  result = (bool)RVO::linearProgram1((std::vector< RVO::Line > const &)*arg1,arg2,arg3,(RVO::Vector2 const &)*arg4,arg5,*arg6);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_linearProgram2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = 0 ;
  float arg2 ;
  RVO::Vector2 *arg3 = 0 ;
  bool arg4 ;
  RVO::Vector2 *arg5 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  size_t result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_linearProgram2.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_Line_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "linearProgram2" "', argument " "1"" of type '" "std::vector< RVO::Line > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "linearProgram2" "', argument " "1"" of type '" "std::vector< RVO::Line > const &""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "linearProgram2" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  res3 = SWIG_ConvertPtr(args[2], &argp3, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "linearProgram2" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "linearProgram2" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg3 = (RVO::Vector2 *)(argp3);
  ecode4 = SWIG_AsVal_bool(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "linearProgram2" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "linearProgram2" "', argument " "5"" of type '" "RVO::Vector2 &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "linearProgram2" "', argument " "5"" of type '" "RVO::Vector2 &""'"); 
  }
  arg5 = (RVO::Vector2 *)(argp5);
  result = RVO::linearProgram2((std::vector< RVO::Line > const &)*arg1,arg2,(RVO::Vector2 const &)*arg3,arg4,*arg5);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_linearProgram3(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float arg4 ;
  RVO::Vector2 *arg5 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_linearProgram3.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_std__vectorT_Line_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "linearProgram3" "', argument " "1"" of type '" "std::vector< RVO::Line > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "linearProgram3" "', argument " "1"" of type '" "std::vector< RVO::Line > const &""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "linearProgram3" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "linearProgram3" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "linearProgram3" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  res5 = SWIG_ConvertPtr(args[4], &argp5, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "linearProgram3" "', argument " "5"" of type '" "RVO::Vector2 &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "linearProgram3" "', argument " "5"" of type '" "RVO::Vector2 &""'"); 
  }
  arg5 = (RVO::Vector2 *)(argp5);
  RVO::linearProgram3((std::vector< RVO::Line > const &)*arg1,arg2,arg3,arg4,*arg5);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Obstacle(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Obstacle(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Obstacle(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
      static void _wrap_delete_Obstacle(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Obstacle(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            RVO::Obstacle * arg1 = (RVO::Obstacle *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_veto_Obstacle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Obstacle can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_KdTree(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class KdTree can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
static SwigV8ReturnValue _wrap_RVO_ERROR_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_RVO_ERROR_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    size_t result;
    
    result = (size_t)RVO::RVO_ERROR;
    jsresult = SWIG_From_size_t((size_t)(result));
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
static void _wrap_Line_point_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Line_point_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    RVO::Line *arg1 = (RVO::Line *) 0 ;
    RVO::Vector2 *arg2 = (RVO::Vector2 *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_RVO__Line, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_point_set" "', argument " "1"" of type '" "RVO::Line *""'"); 
    }
    arg1 = (RVO::Line *)(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Line_point_set" "', argument " "2"" of type '" "RVO::Vector2 *""'"); 
    }
    arg2 = (RVO::Vector2 *)(argp2);
    if (arg1) (arg1)->point = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
static SwigV8ReturnValue _wrap_Line_point_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Line_point_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    RVO::Line *arg1 = (RVO::Line *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    RVO::Vector2 *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_RVO__Line, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_point_get" "', argument " "1"" of type '" "RVO::Line *""'"); 
    }
    arg1 = (RVO::Line *)(argp1);
    result = (RVO::Vector2 *)& ((arg1)->point);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RVO__Vector2, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
static void _wrap_Line_direction_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Line_direction_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    RVO::Line *arg1 = (RVO::Line *) 0 ;
    RVO::Vector2 *arg2 = (RVO::Vector2 *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_RVO__Line, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_direction_set" "', argument " "1"" of type '" "RVO::Line *""'"); 
    }
    arg1 = (RVO::Line *)(argp1);
    res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_RVO__Vector2, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Line_direction_set" "', argument " "2"" of type '" "RVO::Vector2 *""'"); 
    }
    arg2 = (RVO::Vector2 *)(argp2);
    if (arg1) (arg1)->direction = *arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
static SwigV8ReturnValue _wrap_Line_direction_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Line_direction_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    RVO::Line *arg1 = (RVO::Line *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    RVO::Vector2 *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_RVO__Line, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Line_direction_get" "', argument " "1"" of type '" "RVO::Line *""'"); 
    }
    arg1 = (RVO::Line *)(argp1);
    result = (RVO::Vector2 *)& ((arg1)->direction);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RVO__Vector2, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_Line(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  RVO::Line *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Line.");
  result = (RVO::Line *)new RVO::Line();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_RVO__Line, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Line(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Line(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Line(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
      static void _wrap_delete_Line(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Line(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            RVO::Line * arg1 = (RVO::Line *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_RVOSimulator__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  RVO::RVOSimulator *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RVOSimulator__SWIG_0.");
  result = (RVO::RVOSimulator *)new RVO::RVOSimulator();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_RVO__RVOSimulator, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_RVOSimulator__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  size_t arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  RVO::Vector2 *arg8 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  RVO::RVOSimulator *result;
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RVOSimulator__SWIG_1.");
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RVOSimulator" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RVOSimulator" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RVOSimulator" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RVOSimulator" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RVOSimulator" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_RVOSimulator" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RVOSimulator" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_RVOSimulator" "', argument " "8"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RVOSimulator" "', argument " "8"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg8 = (RVO::Vector2 *)(argp8);
  result = (RVO::RVOSimulator *)new RVO::RVOSimulator(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(RVO::Vector2 const &)*arg8);
  
  
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_RVO__RVOSimulator, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_RVOSimulator__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  float arg1 ;
  float arg2 ;
  size_t arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  RVO::RVOSimulator *result;
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_RVOSimulator__SWIG_2.");
  ecode1 = SWIG_AsVal_float(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RVOSimulator" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = (float)(val1);
  ecode2 = SWIG_AsVal_float(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RVOSimulator" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RVOSimulator" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  ecode4 = SWIG_AsVal_float(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RVOSimulator" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RVOSimulator" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_RVOSimulator" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RVOSimulator" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  result = (RVO::RVOSimulator *)new RVO::RVOSimulator(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  
  
  
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_RVO__RVOSimulator, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_RVOSimulator(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_RVOSimulator__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_RVOSimulator__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_RVOSimulator__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_RVOSimulator__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_RVOSimulator__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_RVOSimulator__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_RVOSimulator");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_RVOSimulator(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_RVOSimulator(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_RVOSimulator(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
      static void _wrap_delete_RVOSimulator(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_RVOSimulator(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            RVO::RVOSimulator * arg1 = (RVO::RVOSimulator *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_RVOSimulator_addAgent__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  RVO::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_addAgent" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RVOSimulator_addAgent" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_addAgent" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  result = (arg1)->addAgent((RVO::Vector2 const &)*arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_addAgent__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  RVO::Vector2 *arg2 = 0 ;
  float arg3 ;
  size_t arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  RVO::Vector2 *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_addAgent" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RVOSimulator_addAgent" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_addAgent" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_addAgent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_size_t(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RVOSimulator_addAgent" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RVOSimulator_addAgent" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RVOSimulator_addAgent" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RVOSimulator_addAgent" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RVOSimulator_addAgent" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  res9 = SWIG_ConvertPtr(args[7], &argp9, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "RVOSimulator_addAgent" "', argument " "9"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_addAgent" "', argument " "9"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg9 = (RVO::Vector2 *)(argp9);
  result = (arg1)->addAgent((RVO::Vector2 const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,(RVO::Vector2 const &)*arg9);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_addAgent__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  RVO::Vector2 *arg2 = 0 ;
  float arg3 ;
  size_t arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_addAgent" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RVOSimulator_addAgent" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_addAgent" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_addAgent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  ecode4 = SWIG_AsVal_size_t(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RVOSimulator_addAgent" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = (size_t)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RVOSimulator_addAgent" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RVOSimulator_addAgent" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RVOSimulator_addAgent" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  ecode8 = SWIG_AsVal_float(args[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RVOSimulator_addAgent" "', argument " "8"" of type '" "float""'");
  } 
  arg8 = (float)(val8);
  result = (arg1)->addAgent((RVO::Vector2 const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator__wrap_RVOSimulator_addAgent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_RVOSimulator_addAgent__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_RVOSimulator_addAgent__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 8) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_RVOSimulator_addAgent__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_RVOSimulator_addAgent__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_RVOSimulator_addAgent__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_RVOSimulator_addAgent__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function addAgent.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_addObstacle(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  std::vector< RVO::Vector2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_addObstacle.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_addObstacle" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_std__vectorT_RVO__Vector2_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RVOSimulator_addObstacle" "', argument " "2"" of type '" "std::vector< RVO::Vector2 > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_addObstacle" "', argument " "2"" of type '" "std::vector< RVO::Vector2 > const &""'"); 
  }
  arg2 = (std::vector< RVO::Vector2 > *)(argp2);
  result = (arg1)->addObstacle((std::vector< RVO::Vector2 > const &)*arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_doStep(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_doStep.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_doStep" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  (arg1)->doStep();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentAgentNeighbor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentAgentNeighbor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentAgentNeighbor" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentAgentNeighbor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_getAgentAgentNeighbor" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = ((RVO::RVOSimulator const *)arg1)->getAgentAgentNeighbor(arg2,arg3);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentMaxNeighbors(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentMaxNeighbors.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentMaxNeighbors" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentMaxNeighbors" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((RVO::RVOSimulator const *)arg1)->getAgentMaxNeighbors(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentMaxSpeed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentMaxSpeed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentMaxSpeed" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentMaxSpeed" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (float)((RVO::RVOSimulator const *)arg1)->getAgentMaxSpeed(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentNeighborDist(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentNeighborDist.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentNeighborDist" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentNeighborDist" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (float)((RVO::RVOSimulator const *)arg1)->getAgentNeighborDist(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentNumAgentNeighbors(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentNumAgentNeighbors.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentNumAgentNeighbors" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentNumAgentNeighbors" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((RVO::RVOSimulator const *)arg1)->getAgentNumAgentNeighbors(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentNumObstacleNeighbors(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentNumObstacleNeighbors.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentNumObstacleNeighbors" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentNumObstacleNeighbors" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((RVO::RVOSimulator const *)arg1)->getAgentNumObstacleNeighbors(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentNumORCALines(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentNumORCALines.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentNumORCALines" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentNumORCALines" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((RVO::RVOSimulator const *)arg1)->getAgentNumORCALines(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentObstacleNeighbor(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentObstacleNeighbor.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentObstacleNeighbor" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentObstacleNeighbor" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_getAgentObstacleNeighbor" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = ((RVO::RVOSimulator const *)arg1)->getAgentObstacleNeighbor(arg2,arg3);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentORCALine(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  RVO::Line *result = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentORCALine.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentORCALine" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentORCALine" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_getAgentORCALine" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  result = (RVO::Line *) &((RVO::RVOSimulator const *)arg1)->getAgentORCALine(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RVO__Line, 0 |  0 );
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentPosition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  RVO::Vector2 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentPosition.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentPosition" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentPosition" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (RVO::Vector2 *) &((RVO::RVOSimulator const *)arg1)->getAgentPosition(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentPrefVelocity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  RVO::Vector2 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentPrefVelocity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentPrefVelocity" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentPrefVelocity" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (RVO::Vector2 *) &((RVO::RVOSimulator const *)arg1)->getAgentPrefVelocity(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentRadius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentRadius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentRadius" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentRadius" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (float)((RVO::RVOSimulator const *)arg1)->getAgentRadius(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentTimeHorizon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentTimeHorizon.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentTimeHorizon" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentTimeHorizon" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (float)((RVO::RVOSimulator const *)arg1)->getAgentTimeHorizon(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentTimeHorizonObst(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentTimeHorizonObst.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentTimeHorizonObst" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentTimeHorizonObst" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (float)((RVO::RVOSimulator const *)arg1)->getAgentTimeHorizonObst(arg2);
  jsresult = SWIG_From_float((float)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getAgentVelocity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  RVO::Vector2 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getAgentVelocity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getAgentVelocity" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getAgentVelocity" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (RVO::Vector2 *) &((RVO::RVOSimulator const *)arg1)->getAgentVelocity(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getGlobalTime(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getGlobalTime.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getGlobalTime" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  result = (float)((RVO::RVOSimulator const *)arg1)->getGlobalTime();
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getNumAgents(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getNumAgents.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getNumAgents" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  result = ((RVO::RVOSimulator const *)arg1)->getNumAgents();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getNumObstacleVertices(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getNumObstacleVertices.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getNumObstacleVertices" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  result = ((RVO::RVOSimulator const *)arg1)->getNumObstacleVertices();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getObstacleVertex(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  RVO::Vector2 *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getObstacleVertex.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getObstacleVertex" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getObstacleVertex" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (RVO::Vector2 *) &((RVO::RVOSimulator const *)arg1)->getObstacleVertex(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getNextObstacleVertexNo(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getNextObstacleVertexNo.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getNextObstacleVertexNo" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getNextObstacleVertexNo" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((RVO::RVOSimulator const *)arg1)->getNextObstacleVertexNo(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getPrevObstacleVertexNo(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getPrevObstacleVertexNo.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getPrevObstacleVertexNo" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getPrevObstacleVertexNo" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = ((RVO::RVOSimulator const *)arg1)->getPrevObstacleVertexNo(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getTimeStep(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getTimeStep.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getTimeStep" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  result = (float)((RVO::RVOSimulator const *)arg1)->getTimeStep();
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_processObstacles(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_processObstacles.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_processObstacles" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  (arg1)->processObstacles();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_queryVisibility__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  RVO::Vector2 *arg2 = 0 ;
  RVO::Vector2 *arg3 = 0 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_queryVisibility" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RVOSimulator_queryVisibility" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_queryVisibility" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RVOSimulator_queryVisibility" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_queryVisibility" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg3 = (RVO::Vector2 *)(argp3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RVOSimulator_queryVisibility" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  result = (bool)((RVO::RVOSimulator const *)arg1)->queryVisibility((RVO::Vector2 const &)*arg2,(RVO::Vector2 const &)*arg3,arg4);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_queryVisibility__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  RVO::Vector2 *arg2 = 0 ;
  RVO::Vector2 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_queryVisibility" "', argument " "1"" of type '" "RVO::RVOSimulator const *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RVOSimulator_queryVisibility" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_queryVisibility" "', argument " "2"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg2 = (RVO::Vector2 *)(argp2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RVOSimulator_queryVisibility" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_queryVisibility" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg3 = (RVO::Vector2 *)(argp3);
  result = (bool)((RVO::RVOSimulator const *)arg1)->queryVisibility((RVO::Vector2 const &)*arg2,(RVO::Vector2 const &)*arg3);
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator__wrap_RVOSimulator_queryVisibility(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_RVOSimulator_queryVisibility__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_RVOSimulator_queryVisibility__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_RVOSimulator_queryVisibility__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_RVOSimulator_queryVisibility__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function queryVisibility.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_removeAgent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_removeAgent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_removeAgent" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_removeAgent" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (arg1)->removeAgent(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getUid(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getUid.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getUid" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getUid" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (arg1)->getUid(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_getIndex(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_getIndex.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_getIndex" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_getIndex" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  result = (arg1)->getIndex(arg2);
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentDefaults__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  float arg2 ;
  size_t arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  RVO::Vector2 *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  res8 = SWIG_ConvertPtr(args[6], &argp8, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "8"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_setAgentDefaults" "', argument " "8"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg8 = (RVO::Vector2 *)(argp8);
  (arg1)->setAgentDefaults(arg2,arg3,arg4,arg5,arg6,arg7,(RVO::Vector2 const &)*arg8);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentDefaults__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  float arg2 ;
  size_t arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  ecode4 = SWIG_AsVal_float(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = (float)(val4);
  ecode5 = SWIG_AsVal_float(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = (float)(val5);
  ecode6 = SWIG_AsVal_float(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = (float)(val6);
  ecode7 = SWIG_AsVal_float(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RVOSimulator_setAgentDefaults" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = (float)(val7);
  (arg1)->setAgentDefaults(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator__wrap_RVOSimulator_setAgentDefaults(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 7) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_RVOSimulator_setAgentDefaults__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_RVOSimulator_setAgentDefaults__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 6) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_RVOSimulator_setAgentDefaults__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_RVOSimulator_setAgentDefaults__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function setAgentDefaults.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentMaxNeighbors(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_setAgentMaxNeighbors.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentMaxNeighbors" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentMaxNeighbors" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_setAgentMaxNeighbors" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  (arg1)->setAgentMaxNeighbors(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentMaxSpeed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_setAgentMaxSpeed.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentMaxSpeed" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentMaxSpeed" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_setAgentMaxSpeed" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAgentMaxSpeed(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentNeighborDist(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_setAgentNeighborDist.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentNeighborDist" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentNeighborDist" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_setAgentNeighborDist" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAgentNeighborDist(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentPosition(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  RVO::Vector2 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_setAgentPosition.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentPosition" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentPosition" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RVOSimulator_setAgentPosition" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_setAgentPosition" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg3 = (RVO::Vector2 *)(argp3);
  (arg1)->setAgentPosition(arg2,(RVO::Vector2 const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentPrefVelocity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  RVO::Vector2 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_setAgentPrefVelocity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentPrefVelocity" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentPrefVelocity" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RVOSimulator_setAgentPrefVelocity" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_setAgentPrefVelocity" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg3 = (RVO::Vector2 *)(argp3);
  (arg1)->setAgentPrefVelocity(arg2,(RVO::Vector2 const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentRadius(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_setAgentRadius.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentRadius" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentRadius" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_setAgentRadius" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAgentRadius(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentTimeHorizon(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_setAgentTimeHorizon.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentTimeHorizon" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentTimeHorizon" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_setAgentTimeHorizon" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAgentTimeHorizon(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentTimeHorizonObst(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_setAgentTimeHorizonObst.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentTimeHorizonObst" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentTimeHorizonObst" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RVOSimulator_setAgentTimeHorizonObst" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  (arg1)->setAgentTimeHorizonObst(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setAgentVelocity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  size_t arg2 ;
  RVO::Vector2 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_setAgentVelocity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setAgentVelocity" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setAgentVelocity" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RVOSimulator_setAgentVelocity" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RVOSimulator_setAgentVelocity" "', argument " "3"" of type '" "RVO::Vector2 const &""'"); 
  }
  arg3 = (RVO::Vector2 *)(argp3);
  (arg1)->setAgentVelocity(arg2,(RVO::Vector2 const &)*arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RVOSimulator_setTimeStep(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  RVO::RVOSimulator *arg1 = (RVO::RVOSimulator *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RVOSimulator_setTimeStep.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_RVO__RVOSimulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RVOSimulator_setTimeStep" "', argument " "1"" of type '" "RVO::RVOSimulator *""'"); 
  }
  arg1 = (RVO::RVOSimulator *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RVOSimulator_setTimeStep" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  (arg1)->setTimeStep(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectori__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< int > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectori__SWIG_0.");
  result = (std::vector< int > *)new std::vector< int >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectori__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectori__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = (std::vector< int >::size_type)(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectori(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectori__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectori__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectori__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectori__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vectori");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectori_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectori_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectori_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectori_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectori_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectori_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = (std::vector< int >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectori_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectori_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_isEmpty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectori_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectori_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectori_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectori_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_add" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_add" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = (std::vector< int >::value_type)(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectori_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectori_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_get" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_From_int((int)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectori_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectori_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_set" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = (std::vector< int > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_set" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = (std::vector< int >::value_type)(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vectori(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vectori(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vectori(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
      static void _wrap_delete_vectori(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vectori(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< int > * arg1 = (std::vector< int > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_vectord__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< double > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectord__SWIG_0.");
  result = (std::vector< double > *)new std::vector< double >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectord__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectord__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = (std::vector< double >::size_type)(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectord(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectord__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectord__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectord__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectord__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vectord");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = (std::vector< double > *)(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = (std::vector< double > *)(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = (std::vector< double > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = (std::vector< double >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_isEmpty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = (std::vector< double > *)(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = (std::vector< double > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_add" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = (std::vector< double > *)(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_add" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = (std::vector< double >::value_type)(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_get" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = (std::vector< double > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_From_double((double)(*result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectord_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectord_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_set" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = (std::vector< double > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_double(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_set" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = (std::vector< double >::value_type)(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vectord(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vectord(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vectord(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
      static void _wrap_delete_vectord(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vectord(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< double > * arg1 = (std::vector< double > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_vectorline__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< RVO::Line > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorline__SWIG_0.");
  result = (std::vector< RVO::Line > *)new std::vector< RVO::Line >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_RVO__Line_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorline__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< RVO::Line >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< RVO::Line > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorline__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorline" "', argument " "1"" of type '" "std::vector< RVO::Line >::size_type""'");
  } 
  arg1 = (std::vector< RVO::Line >::size_type)(val1);
  result = (std::vector< RVO::Line > *)new std::vector< RVO::Line >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_RVO__Line_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorline(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorline__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorline__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorline__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorline__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vectorline");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorline_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = (std::vector< RVO::Line > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< RVO::Line >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorline_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorline_size" "', argument " "1"" of type '" "std::vector< RVO::Line > const *""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  result = ((std::vector< RVO::Line > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorline_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = (std::vector< RVO::Line > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< RVO::Line >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorline_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorline_capacity" "', argument " "1"" of type '" "std::vector< RVO::Line > const *""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  result = ((std::vector< RVO::Line > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorline_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = (std::vector< RVO::Line > *) 0 ;
  std::vector< RVO::Line >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorline_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorline_reserve" "', argument " "1"" of type '" "std::vector< RVO::Line > *""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorline_reserve" "', argument " "2"" of type '" "std::vector< RVO::Line >::size_type""'");
  } 
  arg2 = (std::vector< RVO::Line >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorline_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = (std::vector< RVO::Line > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorline_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorline_isEmpty" "', argument " "1"" of type '" "std::vector< RVO::Line > const *""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  result = (bool)((std::vector< RVO::Line > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorline_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = (std::vector< RVO::Line > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorline_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorline_clear" "', argument " "1"" of type '" "std::vector< RVO::Line > *""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorline_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = (std::vector< RVO::Line > *) 0 ;
  std::vector< RVO::Line >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorline_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorline_add" "', argument " "1"" of type '" "std::vector< RVO::Line > *""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Line,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorline_add" "', argument " "2"" of type '" "std::vector< RVO::Line >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorline_add" "', argument " "2"" of type '" "std::vector< RVO::Line >::value_type const &""'"); 
  }
  arg2 = (std::vector< RVO::Line >::value_type *)(argp2);
  (arg1)->push_back((std::vector< RVO::Line >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorline_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = (std::vector< RVO::Line > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< RVO::Line >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorline_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorline_get" "', argument " "1"" of type '" "std::vector< RVO::Line > *""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorline_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< RVO::Line >::value_type *) &std_vector_Sl_RVO_Line_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RVO__Line, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorline_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Line > *arg1 = (std::vector< RVO::Line > *) 0 ;
  int arg2 ;
  std::vector< RVO::Line >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorline_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Line_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorline_set" "', argument " "1"" of type '" "std::vector< RVO::Line > *""'"); 
  }
  arg1 = (std::vector< RVO::Line > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorline_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_RVO__Line,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorline_set" "', argument " "3"" of type '" "std::vector< RVO::Line >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorline_set" "', argument " "3"" of type '" "std::vector< RVO::Line >::value_type const &""'"); 
  }
  arg3 = (std::vector< RVO::Line >::value_type *)(argp3);
  try {
    std_vector_Sl_RVO_Line_Sg__set(arg1,arg2,(RVO::Line const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vectorline(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vectorline(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vectorline(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
      static void _wrap_delete_vectorline(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vectorline(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< RVO::Line > * arg1 = (std::vector< RVO::Line > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_new_vectorvector__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< RVO::Vector2 > *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorvector__SWIG_0.");
  result = (std::vector< RVO::Vector2 > *)new std::vector< RVO::Vector2 >();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_RVO__Vector2_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorvector__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::vector< RVO::Vector2 >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< RVO::Vector2 > *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_vectorvector__SWIG_1.");
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorvector" "', argument " "1"" of type '" "std::vector< RVO::Vector2 >::size_type""'");
  } 
  arg1 = (std::vector< RVO::Vector2 >::size_type)(val1);
  result = (std::vector< RVO::Vector2 > *)new std::vector< RVO::Vector2 >(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_std__vectorT_RVO__Vector2_t, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_vectorvector(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorvector__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorvector__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_vectorvector__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_vectorvector__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_vectorvector");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorvector_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Vector2 > *arg1 = (std::vector< RVO::Vector2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< RVO::Vector2 >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorvector_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Vector2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvector_size" "', argument " "1"" of type '" "std::vector< RVO::Vector2 > const *""'"); 
  }
  arg1 = (std::vector< RVO::Vector2 > *)(argp1);
  result = ((std::vector< RVO::Vector2 > const *)arg1)->size();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorvector_capacity(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Vector2 > *arg1 = (std::vector< RVO::Vector2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< RVO::Vector2 >::size_type result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorvector_capacity.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Vector2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvector_capacity" "', argument " "1"" of type '" "std::vector< RVO::Vector2 > const *""'"); 
  }
  arg1 = (std::vector< RVO::Vector2 > *)(argp1);
  result = ((std::vector< RVO::Vector2 > const *)arg1)->capacity();
  jsresult = SWIG_From_size_t((size_t)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorvector_reserve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Vector2 > *arg1 = (std::vector< RVO::Vector2 > *) 0 ;
  std::vector< RVO::Vector2 >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorvector_reserve.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Vector2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvector_reserve" "', argument " "1"" of type '" "std::vector< RVO::Vector2 > *""'"); 
  }
  arg1 = (std::vector< RVO::Vector2 > *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvector_reserve" "', argument " "2"" of type '" "std::vector< RVO::Vector2 >::size_type""'");
  } 
  arg2 = (std::vector< RVO::Vector2 >::size_type)(val2);
  (arg1)->reserve(arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorvector_isEmpty(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Vector2 > *arg1 = (std::vector< RVO::Vector2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorvector_isEmpty.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Vector2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvector_isEmpty" "', argument " "1"" of type '" "std::vector< RVO::Vector2 > const *""'"); 
  }
  arg1 = (std::vector< RVO::Vector2 > *)(argp1);
  result = (bool)((std::vector< RVO::Vector2 > const *)arg1)->empty();
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorvector_clear(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Vector2 > *arg1 = (std::vector< RVO::Vector2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorvector_clear.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Vector2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvector_clear" "', argument " "1"" of type '" "std::vector< RVO::Vector2 > *""'"); 
  }
  arg1 = (std::vector< RVO::Vector2 > *)(argp1);
  (arg1)->clear();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorvector_add(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Vector2 > *arg1 = (std::vector< RVO::Vector2 > *) 0 ;
  std::vector< RVO::Vector2 >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorvector_add.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Vector2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvector_add" "', argument " "1"" of type '" "std::vector< RVO::Vector2 > *""'"); 
  }
  arg1 = (std::vector< RVO::Vector2 > *)(argp1);
  res2 = SWIG_ConvertPtr(args[0], &argp2, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorvector_add" "', argument " "2"" of type '" "std::vector< RVO::Vector2 >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvector_add" "', argument " "2"" of type '" "std::vector< RVO::Vector2 >::value_type const &""'"); 
  }
  arg2 = (std::vector< RVO::Vector2 >::value_type *)(argp2);
  (arg1)->push_back((std::vector< RVO::Vector2 >::value_type const &)*arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorvector_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Vector2 > *arg1 = (std::vector< RVO::Vector2 > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< RVO::Vector2 >::value_type *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorvector_get.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Vector2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvector_get" "', argument " "1"" of type '" "std::vector< RVO::Vector2 > *""'"); 
  }
  arg1 = (std::vector< RVO::Vector2 > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  try {
    result = (std::vector< RVO::Vector2 >::value_type *) &std_vector_Sl_RVO_Vector2_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RVO__Vector2, 0 |  0 );
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vectorvector_set(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::vector< RVO::Vector2 > *arg1 = (std::vector< RVO::Vector2 > *) 0 ;
  int arg2 ;
  std::vector< RVO::Vector2 >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vectorvector_set.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_std__vectorT_RVO__Vector2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorvector_set" "', argument " "1"" of type '" "std::vector< RVO::Vector2 > *""'"); 
  }
  arg1 = (std::vector< RVO::Vector2 > *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorvector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  res3 = SWIG_ConvertPtr(args[1], &argp3, SWIGTYPE_p_RVO__Vector2,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorvector_set" "', argument " "3"" of type '" "std::vector< RVO::Vector2 >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorvector_set" "', argument " "3"" of type '" "std::vector< RVO::Vector2 >::value_type const &""'"); 
  }
  arg3 = (std::vector< RVO::Vector2 >::value_type *)(argp3);
  try {
    std_vector_Sl_RVO_Vector2_Sg__set(arg1,arg2,(RVO::Vector2 const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_vectorvector(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_vectorvector(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_vectorvector(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
      static void _wrap_delete_vectorvector(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_vectorvector(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            std::vector< RVO::Vector2 > * arg1 = (std::vector< RVO::Vector2 > *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
          object.Clear();
#endif
        }


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_RVO__Agent = {"_p_RVO__Agent", "p_RVO__Agent", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RVO__KdTree = {"_p_RVO__KdTree", "p_RVO__KdTree", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RVO__Line = {"_p_RVO__Line", "std::vector< RVO::Line >::value_type *|p_RVO__Line|RVO::Line *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RVO__Obstacle = {"_p_RVO__Obstacle", "p_RVO__Obstacle", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RVO__RVOSimulator = {"_p_RVO__RVOSimulator", "RVO::RVOSimulator *|p_RVO__RVOSimulator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RVO__Vector2 = {"_p_RVO__Vector2", "RVO::Vector2 *|std::vector< RVO::Vector2 >::value_type *|p_RVO__Vector2", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Line_t = {"_p_std__vectorT_Line_t", "std::vector< RVO::Line > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_RVO__Line_t = {"_p_std__vectorT_RVO__Line_t", "p_std__vectorT_RVO__Line_t|std::vector< RVO::Line > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_RVO__Vector2_t = {"_p_std__vectorT_RVO__Vector2_t", "std::vector< RVO::Vector2 > *|p_std__vectorT_RVO__Vector2_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "p_std__vectorT_double_t|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "p_std__vectorT_int_t|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_RVO__Agent,
  &_swigt__p_RVO__KdTree,
  &_swigt__p_RVO__Line,
  &_swigt__p_RVO__Obstacle,
  &_swigt__p_RVO__RVOSimulator,
  &_swigt__p_RVO__Vector2,
  &_swigt__p_char,
  &_swigt__p_size_type,
  &_swigt__p_std__vectorT_Line_t,
  &_swigt__p_std__vectorT_RVO__Line_t,
  &_swigt__p_std__vectorT_RVO__Vector2_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_RVO__Agent[] = {  {&_swigt__p_RVO__Agent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RVO__KdTree[] = {  {&_swigt__p_RVO__KdTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RVO__Line[] = {  {&_swigt__p_RVO__Line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RVO__Obstacle[] = {  {&_swigt__p_RVO__Obstacle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RVO__RVOSimulator[] = {  {&_swigt__p_RVO__RVOSimulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RVO__Vector2[] = {  {&_swigt__p_RVO__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Line_t[] = {  {&_swigt__p_std__vectorT_Line_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_RVO__Line_t[] = {  {&_swigt__p_std__vectorT_RVO__Line_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_RVO__Vector2_t[] = {  {&_swigt__p_std__vectorT_RVO__Vector2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_RVO__Agent,
  _swigc__p_RVO__KdTree,
  _swigc__p_RVO__Line,
  _swigc__p_RVO__Obstacle,
  _swigc__p_RVO__RVOSimulator,
  _swigc__p_RVO__Vector2,
  _swigc__p_char,
  _swigc__p_size_type,
  _swigc__p_std__vectorT_Line_t,
  _swigc__p_std__vectorT_RVO__Line_t,
  _swigc__p_std__vectorT_RVO__Vector2_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("swig_module_info_data"));
  global_obj->SetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey, mod);
#endif
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
#if (V8_MAJOR_VERSION-0) < 5 || (V8_MAJOR_VERSION == 5 && V8_MINOR_VERSION < 2)
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("swig_module_info_data"));
  v8::Local<v8::Value> moduleinfo;
  if (!global_obj->GetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey).ToLocal(&moduleinfo))
    return 0;
#endif

  if (moduleinfo.IsEmpty() || moduleinfo->IsNull() || moduleinfo->IsUndefined())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty() || moduleinfo_extern->IsNull() || moduleinfo_extern->IsUndefined())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_Vector2, Type: p_RVO__Vector2, Dtor: _wrap_delete_Vector2 */
v8::Handle<v8::FunctionTemplate> _exports_Vector2_class = SWIGV8_CreateClassTemplate("_exports_Vector2");
SWIGV8_SET_CLASS_TEMPL(_exports_Vector2_clientData.class_templ, _exports_Vector2_class);
_exports_Vector2_clientData.dtor = _wrap_delete_Vector2;
if (SWIGTYPE_p_RVO__Vector2->clientdata == 0) {
  SWIGTYPE_p_RVO__Vector2->clientdata = &_exports_Vector2_clientData;
}
/* Name: _exports_Agent, Type: p_RVO__Agent, Dtor: _wrap_delete_Agent */
v8::Handle<v8::FunctionTemplate> _exports_Agent_class = SWIGV8_CreateClassTemplate("_exports_Agent");
SWIGV8_SET_CLASS_TEMPL(_exports_Agent_clientData.class_templ, _exports_Agent_class);
_exports_Agent_clientData.dtor = _wrap_delete_Agent;
if (SWIGTYPE_p_RVO__Agent->clientdata == 0) {
  SWIGTYPE_p_RVO__Agent->clientdata = &_exports_Agent_clientData;
}
/* Name: _exports_Obstacle, Type: p_RVO__Obstacle, Dtor: _wrap_delete_Obstacle */
v8::Handle<v8::FunctionTemplate> _exports_Obstacle_class = SWIGV8_CreateClassTemplate("_exports_Obstacle");
SWIGV8_SET_CLASS_TEMPL(_exports_Obstacle_clientData.class_templ, _exports_Obstacle_class);
_exports_Obstacle_clientData.dtor = _wrap_delete_Obstacle;
if (SWIGTYPE_p_RVO__Obstacle->clientdata == 0) {
  SWIGTYPE_p_RVO__Obstacle->clientdata = &_exports_Obstacle_clientData;
}
/* Name: _exports_KdTree, Type: p_RVO__KdTree, Dtor: 0 */
v8::Handle<v8::FunctionTemplate> _exports_KdTree_class = SWIGV8_CreateClassTemplate("_exports_KdTree");
SWIGV8_SET_CLASS_TEMPL(_exports_KdTree_clientData.class_templ, _exports_KdTree_class);
_exports_KdTree_clientData.dtor = 0;
if (SWIGTYPE_p_RVO__KdTree->clientdata == 0) {
  SWIGTYPE_p_RVO__KdTree->clientdata = &_exports_KdTree_clientData;
}
/* Name: _exports_Line, Type: p_RVO__Line, Dtor: _wrap_delete_Line */
v8::Handle<v8::FunctionTemplate> _exports_Line_class = SWIGV8_CreateClassTemplate("_exports_Line");
SWIGV8_SET_CLASS_TEMPL(_exports_Line_clientData.class_templ, _exports_Line_class);
_exports_Line_clientData.dtor = _wrap_delete_Line;
if (SWIGTYPE_p_RVO__Line->clientdata == 0) {
  SWIGTYPE_p_RVO__Line->clientdata = &_exports_Line_clientData;
}
/* Name: _exports_RVOSimulator, Type: p_RVO__RVOSimulator, Dtor: _wrap_delete_RVOSimulator */
v8::Handle<v8::FunctionTemplate> _exports_RVOSimulator_class = SWIGV8_CreateClassTemplate("_exports_RVOSimulator");
SWIGV8_SET_CLASS_TEMPL(_exports_RVOSimulator_clientData.class_templ, _exports_RVOSimulator_class);
_exports_RVOSimulator_clientData.dtor = _wrap_delete_RVOSimulator;
if (SWIGTYPE_p_RVO__RVOSimulator->clientdata == 0) {
  SWIGTYPE_p_RVO__RVOSimulator->clientdata = &_exports_RVOSimulator_clientData;
}
/* Name: _exports_vectori, Type: p_std__vectorT_int_t, Dtor: _wrap_delete_vectori */
v8::Handle<v8::FunctionTemplate> _exports_vectori_class = SWIGV8_CreateClassTemplate("_exports_vectori");
SWIGV8_SET_CLASS_TEMPL(_exports_vectori_clientData.class_templ, _exports_vectori_class);
_exports_vectori_clientData.dtor = _wrap_delete_vectori;
if (SWIGTYPE_p_std__vectorT_int_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_int_t->clientdata = &_exports_vectori_clientData;
}
/* Name: _exports_vectord, Type: p_std__vectorT_double_t, Dtor: _wrap_delete_vectord */
v8::Handle<v8::FunctionTemplate> _exports_vectord_class = SWIGV8_CreateClassTemplate("_exports_vectord");
SWIGV8_SET_CLASS_TEMPL(_exports_vectord_clientData.class_templ, _exports_vectord_class);
_exports_vectord_clientData.dtor = _wrap_delete_vectord;
if (SWIGTYPE_p_std__vectorT_double_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_double_t->clientdata = &_exports_vectord_clientData;
}
/* Name: _exports_vectorline, Type: p_std__vectorT_RVO__Line_t, Dtor: _wrap_delete_vectorline */
v8::Handle<v8::FunctionTemplate> _exports_vectorline_class = SWIGV8_CreateClassTemplate("_exports_vectorline");
SWIGV8_SET_CLASS_TEMPL(_exports_vectorline_clientData.class_templ, _exports_vectorline_class);
_exports_vectorline_clientData.dtor = _wrap_delete_vectorline;
if (SWIGTYPE_p_std__vectorT_RVO__Line_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_RVO__Line_t->clientdata = &_exports_vectorline_clientData;
}
/* Name: _exports_vectorvector, Type: p_std__vectorT_RVO__Vector2_t, Dtor: _wrap_delete_vectorvector */
v8::Handle<v8::FunctionTemplate> _exports_vectorvector_class = SWIGV8_CreateClassTemplate("_exports_vectorvector");
SWIGV8_SET_CLASS_TEMPL(_exports_vectorvector_clientData.class_templ, _exports_vectorvector_class);
_exports_vectorvector_clientData.dtor = _wrap_delete_vectorvector;
if (SWIGTYPE_p_std__vectorT_RVO__Vector2_t->clientdata == 0) {
  SWIGTYPE_p_std__vectorT_RVO__Vector2_t->clientdata = &_exports_vectorvector_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberFunction(_exports_Vector2_class, "x", _wrap_Vector2_x);
SWIGV8_AddMemberFunction(_exports_Vector2_class, "y", _wrap_Vector2_y);
SWIGV8_AddMemberFunction(_exports_Vector2_class, "mul", _wrap_Vector2__wrap_Vector2_mul);
SWIGV8_AddMemberFunction(_exports_Vector2_class, "div", _wrap_Vector2_div);
SWIGV8_AddMemberFunction(_exports_Vector2_class, "add", _wrap_Vector2_add);
SWIGV8_AddMemberFunction(_exports_Vector2_class, "sub", _wrap_Vector2__wrap_Vector2_sub);
SWIGV8_AddMemberFunction(_exports_Vector2_class, "isEqual", _wrap_Vector2_isEqual);
SWIGV8_AddMemberFunction(_exports_Vector2_class, "notEqual", _wrap_Vector2_notEqual);
SWIGV8_AddStaticVariable(exports_obj, "RVO_EPSILON", _wrap_RVO_EPSILON_get, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RVO_ERROR", _wrap_RVO_ERROR_get, JS_veto_set_variable);
SWIGV8_AddMemberVariable(_exports_Line_class, "point", _wrap_Line_point_get, _wrap_Line_point_set);
SWIGV8_AddMemberVariable(_exports_Line_class, "direction", _wrap_Line_direction_get, _wrap_Line_direction_set);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "addAgent", _wrap_RVOSimulator__wrap_RVOSimulator_addAgent);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "addObstacle", _wrap_RVOSimulator_addObstacle);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "doStep", _wrap_RVOSimulator_doStep);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentAgentNeighbor", _wrap_RVOSimulator_getAgentAgentNeighbor);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentMaxNeighbors", _wrap_RVOSimulator_getAgentMaxNeighbors);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentMaxSpeed", _wrap_RVOSimulator_getAgentMaxSpeed);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentNeighborDist", _wrap_RVOSimulator_getAgentNeighborDist);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentNumAgentNeighbors", _wrap_RVOSimulator_getAgentNumAgentNeighbors);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentNumObstacleNeighbors", _wrap_RVOSimulator_getAgentNumObstacleNeighbors);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentNumORCALines", _wrap_RVOSimulator_getAgentNumORCALines);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentObstacleNeighbor", _wrap_RVOSimulator_getAgentObstacleNeighbor);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentORCALine", _wrap_RVOSimulator_getAgentORCALine);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentPosition", _wrap_RVOSimulator_getAgentPosition);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentPrefVelocity", _wrap_RVOSimulator_getAgentPrefVelocity);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentRadius", _wrap_RVOSimulator_getAgentRadius);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentTimeHorizon", _wrap_RVOSimulator_getAgentTimeHorizon);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentTimeHorizonObst", _wrap_RVOSimulator_getAgentTimeHorizonObst);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getAgentVelocity", _wrap_RVOSimulator_getAgentVelocity);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getGlobalTime", _wrap_RVOSimulator_getGlobalTime);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getNumAgents", _wrap_RVOSimulator_getNumAgents);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getNumObstacleVertices", _wrap_RVOSimulator_getNumObstacleVertices);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getObstacleVertex", _wrap_RVOSimulator_getObstacleVertex);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getNextObstacleVertexNo", _wrap_RVOSimulator_getNextObstacleVertexNo);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getPrevObstacleVertexNo", _wrap_RVOSimulator_getPrevObstacleVertexNo);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getTimeStep", _wrap_RVOSimulator_getTimeStep);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "processObstacles", _wrap_RVOSimulator_processObstacles);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "queryVisibility", _wrap_RVOSimulator__wrap_RVOSimulator_queryVisibility);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "removeAgent", _wrap_RVOSimulator_removeAgent);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getUid", _wrap_RVOSimulator_getUid);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "getIndex", _wrap_RVOSimulator_getIndex);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setAgentDefaults", _wrap_RVOSimulator__wrap_RVOSimulator_setAgentDefaults);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setAgentMaxNeighbors", _wrap_RVOSimulator_setAgentMaxNeighbors);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setAgentMaxSpeed", _wrap_RVOSimulator_setAgentMaxSpeed);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setAgentNeighborDist", _wrap_RVOSimulator_setAgentNeighborDist);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setAgentPosition", _wrap_RVOSimulator_setAgentPosition);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setAgentPrefVelocity", _wrap_RVOSimulator_setAgentPrefVelocity);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setAgentRadius", _wrap_RVOSimulator_setAgentRadius);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setAgentTimeHorizon", _wrap_RVOSimulator_setAgentTimeHorizon);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setAgentTimeHorizonObst", _wrap_RVOSimulator_setAgentTimeHorizonObst);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setAgentVelocity", _wrap_RVOSimulator_setAgentVelocity);
SWIGV8_AddMemberFunction(_exports_RVOSimulator_class, "setTimeStep", _wrap_RVOSimulator_setTimeStep);
SWIGV8_AddMemberFunction(_exports_vectori_class, "size", _wrap_vectori_size);
SWIGV8_AddMemberFunction(_exports_vectori_class, "capacity", _wrap_vectori_capacity);
SWIGV8_AddMemberFunction(_exports_vectori_class, "reserve", _wrap_vectori_reserve);
SWIGV8_AddMemberFunction(_exports_vectori_class, "isEmpty", _wrap_vectori_isEmpty);
SWIGV8_AddMemberFunction(_exports_vectori_class, "clear", _wrap_vectori_clear);
SWIGV8_AddMemberFunction(_exports_vectori_class, "add", _wrap_vectori_add);
SWIGV8_AddMemberFunction(_exports_vectori_class, "get", _wrap_vectori_get);
SWIGV8_AddMemberFunction(_exports_vectori_class, "set", _wrap_vectori_set);
SWIGV8_AddMemberFunction(_exports_vectord_class, "size", _wrap_vectord_size);
SWIGV8_AddMemberFunction(_exports_vectord_class, "capacity", _wrap_vectord_capacity);
SWIGV8_AddMemberFunction(_exports_vectord_class, "reserve", _wrap_vectord_reserve);
SWIGV8_AddMemberFunction(_exports_vectord_class, "isEmpty", _wrap_vectord_isEmpty);
SWIGV8_AddMemberFunction(_exports_vectord_class, "clear", _wrap_vectord_clear);
SWIGV8_AddMemberFunction(_exports_vectord_class, "add", _wrap_vectord_add);
SWIGV8_AddMemberFunction(_exports_vectord_class, "get", _wrap_vectord_get);
SWIGV8_AddMemberFunction(_exports_vectord_class, "set", _wrap_vectord_set);
SWIGV8_AddMemberFunction(_exports_vectorline_class, "size", _wrap_vectorline_size);
SWIGV8_AddMemberFunction(_exports_vectorline_class, "capacity", _wrap_vectorline_capacity);
SWIGV8_AddMemberFunction(_exports_vectorline_class, "reserve", _wrap_vectorline_reserve);
SWIGV8_AddMemberFunction(_exports_vectorline_class, "isEmpty", _wrap_vectorline_isEmpty);
SWIGV8_AddMemberFunction(_exports_vectorline_class, "clear", _wrap_vectorline_clear);
SWIGV8_AddMemberFunction(_exports_vectorline_class, "add", _wrap_vectorline_add);
SWIGV8_AddMemberFunction(_exports_vectorline_class, "get", _wrap_vectorline_get);
SWIGV8_AddMemberFunction(_exports_vectorline_class, "set", _wrap_vectorline_set);
SWIGV8_AddMemberFunction(_exports_vectorvector_class, "size", _wrap_vectorvector_size);
SWIGV8_AddMemberFunction(_exports_vectorvector_class, "capacity", _wrap_vectorvector_capacity);
SWIGV8_AddMemberFunction(_exports_vectorvector_class, "reserve", _wrap_vectorvector_reserve);
SWIGV8_AddMemberFunction(_exports_vectorvector_class, "isEmpty", _wrap_vectorvector_isEmpty);
SWIGV8_AddMemberFunction(_exports_vectorvector_class, "clear", _wrap_vectorvector_clear);
SWIGV8_AddMemberFunction(_exports_vectorvector_class, "add", _wrap_vectorvector_add);
SWIGV8_AddMemberFunction(_exports_vectorvector_class, "get", _wrap_vectorvector_get);
SWIGV8_AddMemberFunction(_exports_vectorvector_class, "set", _wrap_vectorvector_set);


  /* setup inheritances */
  

  /* class instances */
  /* Class: Vector2 (_exports_Vector2) */
v8::Handle<v8::FunctionTemplate> _exports_Vector2_class_0 = SWIGV8_CreateClassTemplate("Vector2");
_exports_Vector2_class_0->SetCallHandler(_wrap_new_Vector2);
_exports_Vector2_class_0->Inherit(_exports_Vector2_class);
_exports_Vector2_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Vector2_obj = _exports_Vector2_class_0->GetFunction();
/* Class: Agent (_exports_Agent) */
v8::Handle<v8::FunctionTemplate> _exports_Agent_class_0 = SWIGV8_CreateClassTemplate("Agent");
_exports_Agent_class_0->SetCallHandler(_wrap_new_veto_Agent);
_exports_Agent_class_0->Inherit(_exports_Agent_class);
_exports_Agent_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Agent_obj = _exports_Agent_class_0->GetFunction();
/* Class: Obstacle (_exports_Obstacle) */
v8::Handle<v8::FunctionTemplate> _exports_Obstacle_class_0 = SWIGV8_CreateClassTemplate("Obstacle");
_exports_Obstacle_class_0->SetCallHandler(_wrap_new_veto_Obstacle);
_exports_Obstacle_class_0->Inherit(_exports_Obstacle_class);
_exports_Obstacle_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Obstacle_obj = _exports_Obstacle_class_0->GetFunction();
/* Class: KdTree (_exports_KdTree) */
v8::Handle<v8::FunctionTemplate> _exports_KdTree_class_0 = SWIGV8_CreateClassTemplate("KdTree");
_exports_KdTree_class_0->SetCallHandler(_wrap_new_veto_KdTree);
_exports_KdTree_class_0->Inherit(_exports_KdTree_class);
_exports_KdTree_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_KdTree_obj = _exports_KdTree_class_0->GetFunction();
/* Class: Line (_exports_Line) */
v8::Handle<v8::FunctionTemplate> _exports_Line_class_0 = SWIGV8_CreateClassTemplate("Line");
_exports_Line_class_0->SetCallHandler(_wrap_new_Line);
_exports_Line_class_0->Inherit(_exports_Line_class);
_exports_Line_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Line_obj = _exports_Line_class_0->GetFunction();
/* Class: RVOSimulator (_exports_RVOSimulator) */
v8::Handle<v8::FunctionTemplate> _exports_RVOSimulator_class_0 = SWIGV8_CreateClassTemplate("RVOSimulator");
_exports_RVOSimulator_class_0->SetCallHandler(_wrap_new_RVOSimulator);
_exports_RVOSimulator_class_0->Inherit(_exports_RVOSimulator_class);
_exports_RVOSimulator_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_RVOSimulator_obj = _exports_RVOSimulator_class_0->GetFunction();
/* Class: vectori (_exports_vectori) */
v8::Handle<v8::FunctionTemplate> _exports_vectori_class_0 = SWIGV8_CreateClassTemplate("vectori");
_exports_vectori_class_0->SetCallHandler(_wrap_new_vectori);
_exports_vectori_class_0->Inherit(_exports_vectori_class);
_exports_vectori_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vectori_obj = _exports_vectori_class_0->GetFunction();
/* Class: vectord (_exports_vectord) */
v8::Handle<v8::FunctionTemplate> _exports_vectord_class_0 = SWIGV8_CreateClassTemplate("vectord");
_exports_vectord_class_0->SetCallHandler(_wrap_new_vectord);
_exports_vectord_class_0->Inherit(_exports_vectord_class);
_exports_vectord_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vectord_obj = _exports_vectord_class_0->GetFunction();
/* Class: vectorline (_exports_vectorline) */
v8::Handle<v8::FunctionTemplate> _exports_vectorline_class_0 = SWIGV8_CreateClassTemplate("vectorline");
_exports_vectorline_class_0->SetCallHandler(_wrap_new_vectorline);
_exports_vectorline_class_0->Inherit(_exports_vectorline_class);
_exports_vectorline_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vectorline_obj = _exports_vectorline_class_0->GetFunction();
/* Class: vectorvector (_exports_vectorvector) */
v8::Handle<v8::FunctionTemplate> _exports_vectorvector_class_0 = SWIGV8_CreateClassTemplate("vectorvector");
_exports_vectorvector_class_0->SetCallHandler(_wrap_new_vectorvector);
_exports_vectorvector_class_0->Inherit(_exports_vectorvector_class);
_exports_vectorvector_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_vectorvector_obj = _exports_vectorvector_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(exports_obj, "abs", _wrap_abs);
SWIGV8_AddStaticFunction(exports_obj, "absSq", _wrap_absSq);
SWIGV8_AddStaticFunction(exports_obj, "det", _wrap_det);
SWIGV8_AddStaticFunction(exports_obj, "normalize", _wrap_normalize);
SWIGV8_AddStaticFunction(exports_obj, "distSqPointLineSegment", _wrap_distSqPointLineSegment);
SWIGV8_AddStaticFunction(exports_obj, "leftOf", _wrap_leftOf);
SWIGV8_AddStaticFunction(exports_obj, "sqr", _wrap_sqr);
SWIGV8_AddStaticFunction(exports_obj, "linearProgram1", _wrap_linearProgram1);
SWIGV8_AddStaticFunction(exports_obj, "linearProgram2", _wrap_linearProgram2);
SWIGV8_AddStaticFunction(exports_obj, "linearProgram3", _wrap_linearProgram3);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("Vector2"), _exports_Vector2_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Agent"), _exports_Agent_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Obstacle"), _exports_Obstacle_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("KdTree"), _exports_KdTree_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Line"), _exports_Line_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("RVOSimulator"), _exports_RVOSimulator_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("vectori"), _exports_vectori_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("vectord"), _exports_vectord_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("vectorline"), _exports_vectorline_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("vectorvector"), _exports_vectorvector_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(rvo2, rvo2_initialize)
#endif
